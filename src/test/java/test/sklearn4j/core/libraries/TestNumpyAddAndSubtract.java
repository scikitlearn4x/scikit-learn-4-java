package test.sklearn4j.core.libraries;

import ai.sklearn4j.core.libraries.numpy.Numpy;
import ai.sklearn4j.core.libraries.numpy.NumpyArray;
import ai.sklearn4j.core.libraries.numpy.NumpyArrayFactory;
import ai.sklearn4j.core.libraries.numpy.NumpyOperationException;
import org.junit.jupiter.api.Assertions;
import org.junit.jupiter.api.Test;
import test.sklearn4j.core.TestHelper;

public class TestNumpyAddAndSubtract {
    @Test
    public void testAddNumpyArraysOfSameDimensions() {
        double[][][] array1 = {{{0.8498362688651786, 0.38847262219392775, 0.491529490731744, 0.14519928481748345}, {0.7016401109880209, 0.9559815834146775, 0.24616147376815534, 0.49604242026690226}, {0.2542089747022154, 0.27716146772691064, 0.9914409615786711, 0.116915835428262}}, {{0.38492600320251036, 0.04455663085917927, 0.1726474566458548, 0.2543754431463955}, {0.11273591863545018, 0.8474118940812869, 0.21211414003536688, 0.3491955367429401}, {0.21874285575081864, 0.20394376525199898, 0.872450640099929, 0.6191935922156495}}, {{0.1880355870914292, 0.689014552012491, 0.5099566042459871, 0.5178654988076001}, {0.8319721008181516, 0.8978320425252354, 0.22334773151980836, 0.40578844056105323}, {0.21778219349883654, 0.1509668440151467, 0.95399825367282, 0.9995919847841824}}};
        double[][][] array2 = {{{0.07694844908148424, 0.5288160712623504, 0.3792202486806373, 0.5940367298164035}, {0.3973269191820903, 0.3582676794660168, 0.8430088888797947, 0.37934496969434683}, {0.25189904976568034, 0.8073710681615235, 0.1774358552323244, 0.7076336528251679}}, {{0.7789548061224858, 0.4850445179121837, 0.2982691389242257, 0.22747586215385052}, {0.0328561661282305, 0.07861920146169654, 0.33433443588683887, 0.2598678356060834}, {0.9315034852227749, 0.75368447831429, 0.10094476519438134, 0.36068138713747655}}, {{0.8614400166012504, 0.27408887442254204, 0.03493910525319177, 0.5542832129891039}, {0.14470334841295873, 0.6071379174227812, 0.1177081066667428, 0.04609821035876871}, {0.8237942845174137, 0.2612629939924991, 0.765998886312385, 0.17551526024053787}}};
        double[][][] expectedSum = {{{0.9267847179466628, 0.9172886934562782, 0.8707497394123813, 0.739236014633887}, {1.0989670301701113, 1.3142492628806943, 1.08917036264795, 0.8753873899612491}, {0.5061080244678957, 1.0845325358884341, 1.1688768168109955, 0.8245494882534299}}, {{1.1638808093249962, 0.529601148771363, 0.4709165955700805, 0.481851305300246}, {0.14559208476368068, 0.9260310955429835, 0.5464485759222057, 0.6090633723490235}, {1.1502463409735935, 0.957628243566289, 0.9733954052943103, 0.9798749793531261}}, {{1.0494756036926796, 0.963103426435033, 0.5448957094991789, 1.0721487117967041}, {0.9766754492311104, 1.5049699599480166, 0.34105583818655116, 0.45188665091982194}, {1.0415764780162502, 0.4122298380076458, 1.719997139985205, 1.1751072450247202}}};

        NumpyArray<Double> a1 = NumpyArrayFactory.from(array1);
        NumpyArray<Double> a2 = NumpyArrayFactory.from(array2);

        NumpyArray<Double> actualSum = Numpy.add(a1, a2);
        TestHelper.assertEqualData(actualSum, expectedSum);
    }

    @Test
    public void testAddNumpyArraysOfEffectiveSameDimensions() {
        double[][][] array1={{{0.4170640029082975, 0.9130867305506143, 0.29794793156381294, 0.5299497904131077}, {0.00825814674726666, 0.7151176866518705, 0.49686017222433965, 0.6403374109003205}, {0.6134435249964159, 0.8879566399316161, 0.0817639085165488, 0.280935135078337}}, {{0.31185748830788773, 0.7234722835327531, 0.08921560319547084, 0.3569414588141334}, {0.5777856324135705, 0.7401476775052548, 0.19588402879036515, 0.0011274114294698157}, {0.8808670967703545, 0.21506574781197862, 0.4977976611223446, 0.16879339353533263}}, {{0.9140756727661614, 0.27782099724715903, 0.5751358616914545, 0.32960300909660367}, {0.4304081761108789, 0.3509534267925164, 0.23812750225381074, 0.8597835433729738}, {0.5277616817658799, 0.7990086756209345, 0.5430201994030612, 0.9382266035384039}}};
        double[][][][] array2={{{{0.19403276705579242}, {0.6603825200711022}, {0.8326644558827556}, {0.6107743903896594}}, {{0.2958521384414262}, {0.14615810851098243}, {0.4444257543150363}, {0.16258174693177485}}, {{0.4487177828377653}, {0.031310429085841585}, {0.18064627188170912}, {0.8389000359237494}}}, {{{0.2893813399296401}, {0.07860622260783423}, {0.009846045020411087}, {0.456920464163149}}, {{0.4293846344172514}, {0.09854809037353507}, {0.18518700539641175}, {0.7367445620170411}}, {{0.3122760561183673}, {0.8649874171703765}, {0.9076505400548064}, {0.6931671596867695}}}, {{{0.2460527512697681}, {0.616925595555249}, {0.6254611158069124}, {0.02969426987460999}}, {{0.36687742071302154}, {0.7860486621736786}, {0.056948370168793616}, {0.5960751644148502}}, {{0.5777823201575247}, {0.639505439533982}, {0.5680176175771618}, {0.33736533242013556}}}};

        NumpyArray<Double> a1 = NumpyArrayFactory.from(array1);
        NumpyArray<Double> a2 = NumpyArrayFactory.from(array2);

        try {
            Numpy.add(a1, a2);
            Assertions.fail("This operation should not be permitted.");
        } catch (NumpyOperationException ignore) {
        } catch (Exception ex) {
            Assertions.fail("Invalid exception type");
        }
    }

    @Test
    public void testAddNumpyArraysDoubleValues() {
        double[][][] array1={{{0.9907355250598483, 0.09380870949537834, 0.7605137976001763, 0.2712778281742999}, {0.5742120623278772, 0.8075871893633569, 0.22982877866312879, 0.049912237261181436}, {0.39752930082122007, 0.45805552432308294, 0.6465087451171136, 0.819184252330756}}, {{0.24864952625986836, 0.8414667761465863, 0.9124723397098614, 0.11109845208192304}, {0.14951024940040003, 0.47439902976038284, 0.5132547838672745, 0.6723974412681042}, {0.7487065679123297, 0.8123510063214008, 0.9401613808617376, 0.7781873999301265}}, {{0.2445002351352369, 0.9807817713671773, 0.10548226568349495, 0.41737440697382566}, {0.3190032943715726, 0.3903115551228713, 0.7365644636867695, 0.22870839090373818}, {0.8675260776214133, 0.2079918924400741, 0.3275938016096027, 0.5903470570968307}}};
        double[][][] expectedSum={{{2.9907355250598484, 2.093808709495378, 2.7605137976001766, 2.2712778281743}, {2.5742120623278772, 2.807587189363357, 2.229828778663129, 2.0499122372611813}, {2.39752930082122, 2.458055524323083, 2.6465087451171136, 2.819184252330756}}, {{2.2486495262598685, 2.841466776146586, 2.9124723397098613, 2.111098452081923}, {2.1495102494004, 2.4743990297603826, 2.5132547838672745, 2.672397441268104}, {2.74870656791233, 2.812351006321401, 2.9401613808617375, 2.7781873999301263}}, {{2.244500235135237, 2.980781771367177, 2.105482265683495, 2.417374406973826}, {2.319003294371573, 2.3903115551228713, 2.7365644636867694, 2.228708390903738}, {2.867526077621413, 2.207991892440074, 2.327593801609603, 2.5903470570968308}}};

        NumpyArray<Double> a1 = NumpyArrayFactory.from(array1);

        NumpyArray<Double> actualSum = Numpy.add(a1, 2.0);
        TestHelper.assertEqualData(actualSum, expectedSum);
    }

    @Test
    public void testAddNumpyArraysByteValue() {
        byte[][][] array1={{{29, 9, 21, 2}, {2, 10, 7, 2}, {13, 15, 12, 4}}, {{17, 21, 28, 2}, {3, 8, 14, 24}, {14, 22, 6, 8}}, {{22, 12, 15, 1}, {15, 12, 23, 19}, {0, 14, 14, 21}}};
        byte[][][] expectedSum={{{49, 29, 41, 22}, {22, 30, 27, 22}, {33, 35, 32, 24}}, {{37, 41, 48, 22}, {23, 28, 34, 44}, {34, 42, 26, 28}}, {{42, 32, 35, 21}, {35, 32, 43, 39}, {20, 34, 34, 41}}};

        NumpyArray<Byte> a1 = NumpyArrayFactory.from(array1);

        NumpyArray<Byte> actualSum = Numpy.add(a1, (byte)20);
        TestHelper.assertEqualData(actualSum, expectedSum);
    }

    @Test
    public void testAddNumpyArraysShortValue() {
        short[][][] array1={{{16, 14, 18, 16}, {4, 0, 27, 27}, {11, 25, 1, 26}}, {{27, 19, 14, 26}, {13, 19, 19, 8}, {5, 20, 24, 9}}, {{6, 25, 12, 7}, {2, 13, 11, 15}, {6, 14, 7, 20}}};
        short[][][] expectedSum={{{36, 34, 38, 36}, {24, 20, 47, 47}, {31, 45, 21, 46}}, {{47, 39, 34, 46}, {33, 39, 39, 28}, {25, 40, 44, 29}}, {{26, 45, 32, 27}, {22, 33, 31, 35}, {26, 34, 27, 40}}};

        NumpyArray<Short> a1 = NumpyArrayFactory.from(array1);

        NumpyArray<Short> actualSum = Numpy.add(a1, (short)20);
        TestHelper.assertEqualData(actualSum, expectedSum);
    }

    @Test
    public void testAddNumpyArraysIntValue() {
        int[][][] array1={{{0, 20, 23, 15}, {28, 13, 21, 4}, {3, 6, 21, 29}}, {{17, 21, 28, 9}, {15, 22, 11, 1}, {18, 8, 18, 9}}, {{17, 1, 2, 3}, {0, 22, 17, 15}, {25, 7, 27, 5}}};
        int[][][] expectedSum={{{20, 40, 43, 35}, {48, 33, 41, 24}, {23, 26, 41, 49}}, {{37, 41, 48, 29}, {35, 42, 31, 21}, {38, 28, 38, 29}}, {{37, 21, 22, 23}, {20, 42, 37, 35}, {45, 27, 47, 25}}};

        NumpyArray<Integer> a1 = NumpyArrayFactory.from(array1);

        NumpyArray<Integer> actualSum = Numpy.add(a1, 20);
        TestHelper.assertEqualData(actualSum, expectedSum);
    }

    @Test
    public void testAddNumpyArraysLongValue() {
        long[][][] array1={{{6, 28, 22, 17}, {26, 20, 8, 4}, {23, 10, 24, 7}}, {{25, 1, 20, 13}, {23, 4, 21, 5}, {14, 14, 28, 3}}, {{4, 6, 13, 12}, {13, 11, 28, 17}, {17, 22, 15, 2}}};
        long[][][] expectedSum={{{26, 48, 42, 37}, {46, 40, 28, 24}, {43, 30, 44, 27}}, {{45, 21, 40, 33}, {43, 24, 41, 25}, {34, 34, 48, 23}}, {{24, 26, 33, 32}, {33, 31, 48, 37}, {37, 42, 35, 22}}};

        NumpyArray<Long> a1 = NumpyArrayFactory.from(array1);

        NumpyArray<Long> actualSum = Numpy.add(a1, (long)20);
        TestHelper.assertEqualData(actualSum, expectedSum);
    }

    @Test
    public void testAddNumpyArraysFloatValue() {
        float[][][] array1={{{24.636015f, 20.889547f, 5.531764f, 27.127632f},  {26.876032f, 4.2244225f, 3.2533963f, 29.580786f},  {18.756655f, 8.06099f, 4.589737f, 12.1915655f}},  {{28.413414f, 5.773226f, 19.82812f, 13.515765f},  {15.142787f, 24.391577f, 5.1407757f, 24.662132f},  {14.756189f, 0.58043253f, 3.3942122f, 21.059649f}},  {{22.070795f, 20.682585f, 23.28233f, 23.47345f},  {13.425268f, 14.71812f, 17.835907f, 17.57331f},  {0.035388723f, 28.206497f, 17.778812f, 11.408034f}}};
        float[][][] expectedSum={{{4.636015f, 0.88954735f, -14.468236f, 7.127632f},  {6.876032f, -15.775578f, -16.746603f, 9.580786f},  {-1.2433453f, -11.93901f, -15.410263f, -7.8084345f}},  {{8.413414f, -14.226774f, -0.17188072f, -6.484235f},  {-4.857213f, 4.391577f, -14.859224f, 4.6621323f},  {-5.2438107f, -19.419567f, -16.605787f, 1.0596485f}},  {{2.070795f, 0.68258476f, 3.2823296f, 3.4734497f},  {-6.574732f, -5.2818804f, -2.164093f, -2.4266891f},  {-19.964611f, 8.206497f, -2.2211876f, -8.591966f}}};

        NumpyArray<Float> a1 = NumpyArrayFactory.from(array1);

        NumpyArray<Float> actualSum = Numpy.add(a1, -20.0f);
        TestHelper.assertEqualData(actualSum, expectedSum);
    }
}
